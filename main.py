import uuid
from astrbot.api.event import filter, AstrMessageEvent, MessageEventResult
from astrbot.api.star import Context, Star, register
from astrbot.api.message_components import *
from .comfyui_api import ComfyUI
from astrbot.api import llm_tool, logger


# 获取当前文件的绝对路径
current_file_path = os.path.abspath(__file__)
# 获取当前文件所在目录的绝对路径
current_directory = os.path.dirname(current_file_path)
# 图片生成存放目录
img_path = os.path.join(current_directory, 'output', 'temp.png')


@register("astrbot_plugin_comfyui)", "fanfanfan", "利用本地启动的 ComfyUI 服务实现文生图功能", "1.0.0",
          "https://github.com/yuan199696/astrbot_plugin_comfyui")
class ComfyUIPlugin(Star):
    def __init__(self, context: Context, config: dict):
        super().__init__(context)
        client_id = str(uuid.uuid4())
        try:
            self.comfy_ui = ComfyUI(config, client_id)
        except Exception:
            logger.error(f"【初始化 ComfyUI Websocket 客户端失败，请注意是否已开启 ComfyUI 服务端】")

    async def initialize(self):
        self.context.activate_llm_tool("comfyui_txt2img")

    @llm_tool(name="comfyui_txt2img")
    async def comfyui_txt2img(self, event: AstrMessageEvent, prompt: str, img_width: int = None, img_height: int = None) -> MessageEventResult:
        '''AI painting based on the prompts entered by the user.

        Args:
            prompt(string): A prompt for text to image,if the user inputs Chinese prompts, they need to be translated into English prompts that are closely aligned with the specialized terms used for AI painting, such as the prompts used when creating AI art with Midjourney.
            img_width(number): The width of the image generated by AI painting. Optional parameter, this does not need to be parsed when there is no specified information about the image width.
            img_height(number): The height of the image generated by AI painting. Optional parameter, this does not need to be parsed when there is no specified information about the image height.
        '''
        logger.info(f"prompt:{prompt}")
        img = self.comfy_ui.text_2_img(prompt, img_width, img_height)
        # 将图片保存到当前output目录下
        with open(img_path, 'wb') as fp:
            fp.write(img)
        chain = [
            Image.fromFileSystem(img_path)
        ]
        yield event.chain_result(chain)
